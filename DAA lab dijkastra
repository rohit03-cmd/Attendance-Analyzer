import heapq

import math

# Heuristic function: Euclidean distance for simplicity

def euclidean_distance(coord1, coord2):

 x1, y1 = coord1

 x2, y2 = coord2

 return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

# Bidirectional A* algorithm

def bidirectional_a_star(graph, start, goal, coordinates):

 # Priority queues for forward and backward searches

 forward_open_set = [(0, start)]

 backward_open_set = [(0, goal)]

 

 # G-scores (actual distance traveled so far)

 forward_g_score = {node: float('inf') for node in graph}

 backward_g_score = {node: float('inf') for node in graph}

 forward_g_score[start] = 0

 backward_g_score[goal] = 0
# F-scores (estimated total cost)

 forward_f_score = {node: float('inf') for node in graph}

 backward_f_score = {node: float('inf') for node in graph}

 forward_f_score[start] = euclidean_distance(coordinates[start], coordinates[goal])

 backward_f_score[goal] = euclidean_distance(coordinates[goal], coordinates[start])

 

 # Path reconstruction dictionaries

 forward_came_from = {}

 backward_came_from = {}

 

 # Sets to store visited nodes

 forward_visited = set()

 backward_visited = set()

 # Main loop for bidirectional search

 while forward_open_set and backward_open_set:

 # Expand the forward search

 _, current_forward = heapq.heappop(forward_open_set)

 forward_visited.add(current_forward)

 

 # Expand the backward search

 _, current_backward = heapq.heappop(backward_open_set)

 backward_visited.add(current_backward)
# If paths meet, reconstruct the route

 if current_forward in backward_visited or current_backward in forward_visited:

 return reconstruct_path(current_forward, forward_came_from, backward_came_from, 

start, goal)

 # Process neighbors for forward search

 for neighbor, weight in graph[current_forward].items():

 tentative_g_score = forward_g_score[current_forward] + weight

 if tentative_g_score < forward_g_score[neighbor]:

 forward_came_from[neighbor] = current_forward

 forward_g_score[neighbor] = tentative_g_score

 forward_f_score[neighbor] = tentative_g_score + 

euclidean_distance(coordinates[neighbor], coordinates[goal])

 heapq.heappush(forward_open_set, (forward_f_score[neighbor], neighbor))

 

 # Process neighbors for backward search

 for neighbor, weight in graph[current_backward].items():

 tentative_g_score = backward_g_score[current_backward] + weight

 if tentative_g_score < backward_g_score[neighbor]:

 backward_came_from[neighbor] = current_backward

 backward_g_score[neighbor] = tentative_g_score

 backward_f_score[neighbor] = tentative_g_score + 

euclidean_distance(coordinates[neighbor], coordinates[start])

 heapq.heappush(backward_open_set, (backward_f_score[neighbor], neighbor))# Helper function to reconstruct the path from forward and backward search data

def reconstruct_path(meeting_node, forward_came_from, backward_came_from, start, goal):

 # Reconstruct forward path from start to meeting node

 path = []

 current = meeting_node

 while current in forward_came_from:

 path.append(current)

 current = forward_came_from[current]

 path.append(start)

 path = path[::-1] # Reverse to get start to meeting node

 

 # Reconstruct backward path from meeting node to goal

 current = meeting_node

 while current in backward_came_from:

 current = backward_came_from[current]

 path.append(current)
